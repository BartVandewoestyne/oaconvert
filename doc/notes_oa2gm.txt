Some notes on the behavior of oa2gm (http://buteo.szm.com/oa2gm/index.htm)
--------------------------------------------------------------------------

First, the following header is written to the output file:

  ; Generated by oa2gm 0.3c (OpenAir to Gpsmapper)
  [IMG ID]
  ID=42200100
  Name=airspace
  Preprocess=F
  CodePage=1250
  TreSize=1311
  POIIndex=N
  Levels=5
  Level0=21
  Level1=19
  Level2=17
  Level3=15
  Level4=14
  Zoom0=0
  Zoom1=1
  Zoom2=2
  Zoom3=3
  Zoom4=4
  [END-IMG ID]

Then, we read the header (type of command).  A header can be something of

  *## AC AN AL V DP DB DC ...

Then, depending on the header, we do the necessary stuff:

*##
  -> Comment

AC (Airspace Class)
  -> Can be either:
       R: Restricted
       Q: Danger
       P: Prohibited
       A: Class A
       B: Class B
       C: Class C
       D: Class D
       GP: Glider Prohibited
       CTR: CTR
       W: Wave Window

AN (Airspace Name)

AH (Airspace Ceiling)

AL (Airspace Floor)

V x = n (Variable assignment)

DP coordinate
  -> Add polygon pointC
  -> Coordinates are dd:mm:ss N dd:mm:ss W
     Example:
       DP 36:47:40 N 115:07:00 W    c41
  -> Everything is converted to a point in decimal degrees with the formula:
       ddegrees = +/- dd + mm/60 + sec/3600
     If it is s/S or w/W, then we give it a minus sign.
     The decimal values are in point[0] and point [1].

DA
  -> Not supported by oa2gm?

DB coordinate1, coordinate2
  -> Add an arc, from coordinate1 to coordinate2 (set center using V X=...)

DC radius
  -> Draw a circle (center taken from the previous V X=... record, radius
     in nautical miles (nm).
  -> Note that 1 nautical mile = 1852 meters.
  -> The radius is converted to meters before drawing the circle.
     First, we calculate how many meters 1 degree lat and long are:
  
       degx=TWOPI*(globe_r*cos(PI*c[0]/180))/360; /* 1 degree Lon in meters */
       degy=TWOPI*globe_r/360;                    /* 1 degree Lat in meters */
  
     Then we take 360 steps (we could do it finer here...) to compute
     the coordinates in degrees around (0,0):
  
       x = c[1] + rad*cos(PI* (double) u/180) / degx;
       y = c[2] + rad*sin(PI* (double) u/180) / degy;
  
     See e.g. http://en.wikipedia.org/wiki/Longitude#Degree_length


Finally, an airspace zone is written to the output file as follows:

[RGN40]
Type=0x0a
Levels=3
Data0=(49.14616,21.30663),(49.11423,21.51657),...,(49.14616,21.30663)
[END-RGN40]

-> RGN40 is used to define linear objects such as streets, streams, etc.
-> Type=0x0a is [POLYLINE] type  'Unpaved Road-thin'.
